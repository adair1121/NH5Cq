//战斗组件
abstract class BattleComponent extends ComponentBase
{
	//角色身上Buff列表
	protected buffList:List<BuffBase>;

	//是否开始战斗
	protected isStartFight:boolean;

	//组件类型
	public get type():ComponentType { return ComponentType.Battle; }

	//移动时间
	public abstract get moveTime():number;

	//攻击距离
	public abstract get atkDistance():number;

	//初始化组件
	public init():void
	{
		this.buffList = new List<BuffBase>();
	}

	//释放组件
	public release():void
	{
		this.buffList.clear();
		this.buffList = null;
	}

	//更新
	public Update(deltaTime:number):void
	{
		if (!this.isStartFight || this.owner.currState != FSMState.Idle)
			return;

		var objRet = this.getNearestTarget();
		var target = objRet["targetEntity"] as Entity;

		if (!target)
			return;

		
		if (objRet["distance"] <= this.atkDistance)
		{
			this.owner.trigger(RoleEventDefine.ChangeState, FSMState.Attack, target, this.getCastSkill());
		}
		else
		{
			var targetComp = target.getComponent<BlackboardComponent>(ComponentType.Blackboard);
			var targetPos = targetComp.getPosition();

			var selfComp = this.owner.getComponent<BlackboardComponent>(ComponentType.Blackboard);
			var selfPos = selfComp.getPosition();
			
			var findPathComp = this.owner.getComponent<FindPathComponent>(ComponentType.FindPath);
			var toPostion = findPathComp.getNextMoveCell(targetPos, selfPos);

			this.owner.trigger(RoleEventDefine.ChangeState, FSMState.Move, toPostion, this.moveTime);
		}
	}

	//获取可释放的技能
	protected abstract getCastSkill():SkillBase;

	//获取最近的目标
	protected getNearestTarget():{}
	{
		var entityList = EntityMgr.Instance.getOtherCampEnityList(this.owner.camp);
		if (!entityList || entityList.count == 0)
			return null;

		var selfComp = this.owner.getComponent<BlackboardComponent>(ComponentType.Blackboard);
		var sx = selfComp.getAttrValue(data.RoleAttr.x);
		var sy = selfComp.getAttrValue(data.RoleAttr.y);

		var distance:number = ConstDefine.IntMaxValue;
		var targetEntity:Entity = null;

		entityList.forEach(entity =>
		{
			var targetComp = entity.getComponent<BlackboardComponent>(ComponentType.Blackboard);
			if (targetComp.getAttrValue(data.RoleAttr.HP) <= 0)
				return;

			var tx = targetComp.getAttrValue(data.RoleAttr.x);
			var ty = targetComp.getAttrValue(data.RoleAttr.y);

			var targetDistance = Utility.distanceCell(sx, sy, tx, ty);
			if (targetDistance < distance)
			{
				targetEntity = entity;
				distance = targetDistance;
			}
		});

		return { distance: distance, targetEntity : targetEntity };
	}

	//添加Buff 添加时必须做深拷贝
	public addBuff(buff:BuffBase):Object
	{
		var objRet = { isAddSuccess: false, removeBuffList: new List<number>() };

		if (buff.buffTp.DeleteType == BuffDelType.NeverDestroy)
		{
			this.buffList.add(BuffBase.createBuffByTp(buff.caster, buff.buffTp, buff.ownerSkillId).addBuff(this.owner));
			objRet.isAddSuccess = true;
			return objRet;
		}

		//如果buffer存在, 并且新buffer等级>=原有buffer等级，将进行替换
		var findBuff = this.buffList.find(x => x.type == buff.type && x.buffTp.DeleteType != BuffDelType.NeverDestroy);
		if (!!findBuff)
		{
			if (buff.buffTp.Lev >= findBuff.buffTp.Lev)
			{
				this.removeBuff(findBuff);
				objRet.removeBuffList.add(findBuff.buffTp.ID);
				objRet.isAddSuccess = true;
				this.buffList.add(BuffBase.createBuffByTp(buff.caster, buff.buffTp, buff.ownerSkillId).addBuff(this.owner));
			}

			return objRet;
		}

		//如果出现比添加Buffer更高优先级的，将不添加，0最大
		findBuff = this.buffList.find(x => x.buffTp.BuffPriority < buff.buffTp.BuffPriority && x.buffTp.DeleteType != BuffDelType.NeverDestroy);
		if (!!findBuff)
			return objRet;

		//如果buff不存在，将判定buffer优先级，优先级大的替换小的, 移除准则等于所有或相应状态时，将被移除
		this.buffList.removeAll(buffBase =>
		{
			if (buffBase.buffTp.DeleteType == BuffDelType.NeverDestroy)
				return false;

			if (buffBase.buffTp.BuffPriority > buff.buffTp.BuffPriority &&
				(buffBase.buffTp.BufferState == buff.buffTp.RemoveRule || buff.buffTp.RemoveRule == BufferRemoveRule.All))
			{
				buffBase.removeBuff();
				objRet.removeBuffList.add(buffBase.buffTp.ID);
				return true;
			}

			return false;

		}, this);

		this.buffList.add(BuffBase.createBuffByTp(buff.caster, buff.buffTp, buff.ownerSkillId).addBuff(this.owner));
		objRet.isAddSuccess = true;
		return objRet;
	}

	//移除Buff
	public removeBuff(buff:BuffBase):void
	{
		this.buffList.removeItem(buff.removeBuff());
	}
}