var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
//技能基类
var SkillBase = (function () {
    //构造
    function SkillBase(owner, skillTp) {
        //技能所包含的Buff列表
        this.skillBuffList = new List();
        //技能参数列表
        this.skillEffectArgumentsDic = new Dictionary();
        this.owner = owner;
        this.skillTemple = skillTp;
    }
    Object.defineProperty(SkillBase.prototype, "skillTp", {
        get: function () { return this.skillTemple; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillBase.prototype, "skillGroupId", {
        //技能所属技能组
        get: function () { return !!this.skillTp ? this.skillTp.skill_category : 0; },
        enumerable: true,
        configurable: true
    });
    //是否可以释放此技能
    SkillBase.prototype.isCastSkill = function () {
        var blackboardComp = this.owner.getComponent(ComponentType.Blackboard);
        return this.skillTp.skilllev > 0 && this.skillCD <= 0 && blackboardComp.getAttrValue(data.RoleAttr.MP) >= this.skillTp.mpConsume;
    };
    //定时器更新
    SkillBase.prototype.TimerUpdate = function (timerInfo, deltaTime) {
        this.skillCD -= deltaTime;
        if (this.skillCD <= 0) {
            this.skillCD = 0;
            timerInfo.isDelete = true;
        }
    };
    //是否能使用技能
    SkillBase.prototype.canUseSkill = function (tx, ty) { return true; };
    //获得技能目标列表
    SkillBase.prototype.getTargetList = function (targetRangeList) {
        var targetList = new List();
        var targetEntityList = null;
        if (this.skillTp.target_relation == SkillTarget.Self)
            targetEntityList = EntityMgr.Instance.getGroupEnityList(this.owner.camp);
        else
            targetEntityList = EntityMgr.Instance.getOtherCampEnityList(this.owner.camp);
        if (!!targetEntityList && targetEntityList.count > 0) {
            targetEntityList.forEach(function (entity) {
                var blackboardComp = entity.getComponent(ComponentType.Blackboard);
                if (blackboardComp.getAttrValue(data.RoleAttr.HP) <= 0)
                    return;
                var ex = blackboardComp.getAttrValue(data.RoleAttr.x);
                var ey = blackboardComp.getAttrValue(data.RoleAttr.y);
                var findPt = targetRangeList.find(function (pt) { return pt.x == ex && pt.y == ey; });
                if (!!findPt)
                    targetList.add(blackboardComp);
            });
        }
        return targetList;
    };
    //释放技能
    SkillBase.prototype.castSkill = function (target) {
        if (!this.isCastSkill)
            return;
        var targetComp = target.getComponent(ComponentType.Blackboard);
        var selfComp = this.owner.getComponent(ComponentType.Blackboard);
        return this.useSkill(selfComp, targetComp);
    };
    //技能消耗
    SkillBase.prototype.skillConsume = function (self) {
        this.skillCD = this.skillTp.cdtime;
        self.modifyAttrValue(data.RoleAttr.MP, -this.skillTp.mpConsume);
        TimerMgr.Instance.addTimerEvent(new TimerInfo(this));
    };
    //使用技能
    SkillBase.prototype.useSkill = function (self, target) {
        var _this = this;
        this.skillConsume(self);
        var sx = self.getAttrValue(data.RoleAttr.x);
        var sy = self.getAttrValue(data.RoleAttr.y);
        var tx = target.getAttrValue(data.RoleAttr.x);
        var ty = target.getAttrValue(data.RoleAttr.y);
        var targetList = this.getSkillTargetList(target, sx, sy, tx, ty);
        if (!targetList || targetList.count == 0) {
            console.error("SkillBase useSkill targetList == null");
            return;
        }
        var add2SelfBuffList = new List();
        var removeIdList = null;
        var damageInfoList = new List();
        var targetBattleComp = target.owner.getComponent(ComponentType.Battle);
        targetList.forEach(function (blackboardComp) {
            var damageInfo = _this.calcSkillDamage(self, target);
            var addBuffIdList = new List();
            _this.skillBuffList.forEach(function (buffBase) {
                if (buffBase.buffTp.ifCalc == 1)
                    return;
                if (Utility.random(0, 10000) > buffBase.buffTp.buffRate)
                    return;
                switch (buffBase.buffTp.BuffTarget) {
                    case BuffTarget.Self:
                        add2SelfBuffList.add(buffBase);
                        break;
                    case BuffTarget.Enemy:
                        {
                            var objRet = targetBattleComp.addBuff(buffBase);
                            if (!!objRet["isAddSuccess"])
                                addBuffIdList.add(buffBase.buffTp.ID);
                            removeIdList = objRet["removeBuffList"];
                            break;
                        }
                    default:
                        console.error("SkillBase CastSkill BuffTarget: " + buffBase.buffTp.BuffTarget);
                        break;
                }
                damageInfoList.add(new DamageInfoEvent(target.owner, damageInfo["damage"], addBuffIdList, removeIdList, damageInfo["isDead"]));
            });
        });
        return damageInfoList;
    };
    //计算技能伤害
    SkillBase.prototype.calcSkillDamage = function (self, target) {
        var skillArgList = new List(new Array(SkillArgDefine.Max));
        //判定初始伤害值：基础伤害值=攻击方攻击*技能修正+技能附加值-被攻击者防御*技能抵抗修正
        skillArgList.setItem(SkillArgDefine.Atk, self.getAttrValue(data.RoleAttr.ATK));
        skillArgList.setItem(SkillArgDefine.AtkRate, this.skillTp.ATKRate);
        skillArgList.setItem(SkillArgDefine.AtkValue, this.skillTp.ATKVal);
        skillArgList.setItem(SkillArgDefine.DamageRate, this.skillTp.DamageRate);
        var damage = 0;
        if (this.skillTp.target_relation == SkillTarget.Enemy) {
            switch (this.skillTp.skill_type) {
                case AtkType.Atk:
                    skillArgList.setItem(SkillArgDefine.Def, target.getAttrValue(data.RoleAttr.DEF));
                    break;
                case AtkType.MAtk:
                    skillArgList.setItem(SkillArgDefine.Def, target.getAttrValue(data.RoleAttr.MDEF));
                    break;
                default:
                    console.error("SkillBase calcSkillDamage AtkType default");
                    break;
            }
            this.CalcSkillArgByBuff(skillArgList);
            damage = Math.floor(skillArgList.getItem(SkillArgDefine.Atk) * skillArgList.getItem(SkillArgDefine.AtkRate)
                + skillArgList.getItem(SkillArgDefine.AtkValue) - (skillArgList.getItem(SkillArgDefine.Def) * this.skillTp.DamageRate / 10000));
            damage = damage <= 0 ? -1 : -damage;
            //判定是否暴击【1】是否强制暴击或者不暴击。【2】按公式判定暴击概率。最终暴击率=攻击方暴击率-被攻击抗暴击率
            var critial = self.getAttrValue(data.RoleAttr.critial); //由于是int，需要用万分之填写 1.2%暴击应该填写120
            var critcoe = self.getAttrValue(data.RoleAttr.critcoe) / 10000; //因为只能填int 需要用万分之填写150%只能填入15000，所以需要除以10000
            var resicritial = target.getAttrValue(data.RoleAttr.resicritial); //抗爆系数
            var _critial = critial - resicritial;
            if (_critial > 0) {
                if (Utility.random(0, 10000) <= _critial)
                    damage = Math.floor(damage * critcoe);
            }
        }
        else if (this.skillTp.target_relation == SkillTarget.Self) {
            this.CalcSkillArgByBuff(skillArgList);
            damage = Math.floor(skillArgList.getItem(SkillArgDefine.Atk) * skillArgList.getItem(SkillArgDefine.AtkRate) / 10000) + skillArgList.getItem(SkillArgDefine.AtkValue);
            damage = Math.floor(damage * self.getAttrValue(data.RoleAttr.treat_percent) / 10000);
        }
        var targetHp = target.getAttrValue(data.RoleAttr.HP);
        var targetMHp = target.getAttrValue(data.RoleAttr.MHP);
        targetHp += damage;
        targetHp = targetHp <= 0 ? 0 : targetHp;
        targetHp = targetHp >= targetMHp ? targetMHp : targetHp;
        target.setAttrValue(data.RoleAttr.HP, targetHp);
        return { damage: damage, isDead: targetHp == 0 };
    };
    //通过参与计算的Buff修正技能参数
    SkillBase.prototype.CalcSkillArgByBuff = function (skillArgList) {
        this.skillBuffList.forEach(function (buffBase) {
            if (buffBase.buffTp.ifCalc == 1)
                buffBase.TriggerSkillBuff(skillArgList);
        });
    };
    //通过技能ID创建技能
    SkillBase.createSkillById = function (owner, skillId) {
        var skillTp = TempleMgr.select("SkillTemple", skillId);
        if (!skillTp)
            return null;
        return SkillBase.createSkillByTp(owner, skillTp);
    };
    //通过技能模版创建技能
    SkillBase.createSkillByTp = function (owner, skillTp) {
        var skill = null;
        switch (skillTp.skillType) {
            case SkillType.Single:
                skill = new SingleSkill(owner, skillTp);
                break;
            case SkillType.Summon:
                skill = new SummonSkill(owner, skillTp);
                break;
            case SkillType.Range:
                skill = SkillBase.createSkillByShape(owner, skillTp);
                break;
            case SkillType.Hit:
                skill = new HitSkill(owner, skillTp);
                break;
            case SkillType.CircleHit:
                skill = new CircleSkill(owner, skillTp);
                break;
        }
        if (skill != null)
            skill.SetSkillBuffer(skillTp);
        return skill;
    };
    //通过范围形状创建技能
    SkillBase.createSkillByShape = function (owner, skillTp) {
        switch (skillTp.shape) {
            case SkillShape.Line: return new LineSkill(owner, skillTp);
            case SkillShape.Circle: return new CircleSkill(owner, skillTp);
            case SkillShape.Sector: return new SectorSkill(owner, skillTp);
        }
        return null;
    };
    //设置技能Buff
    SkillBase.prototype.SetSkillBuffer = function (skillTp) {
        var _this = this;
        this.skillEffectArgumentsDic.clear();
        this.addSkillArgument(skillTp.Effect1, skillTp.EffectArg1);
        this.addSkillArgument(skillTp.Effect2, skillTp.EffectArg2);
        this.addSkillArgument(skillTp.Effect3, skillTp.EffectArg3);
        var buffList = this.skillEffectArgumentsDic.getValue(SkillEffect.AdditionalBuff);
        if (!buffList || buffList.count == 0)
            return;
        this.skillBuffList.clear();
        buffList.forEach(function (buffId) {
            var buff = BuffBase.createBuffById(_this.owner, buffId, skillTp.ID);
            if (!!buff)
                _this.skillBuffList.add(buff);
        });
        this.skillEffectArgumentsDic.remove(SkillEffect.AdditionalBuff);
    };
    //添加技能参数
    SkillBase.prototype.addSkillArgument = function (key, value) {
        if (key <= 0)
            return;
        key = key == SkillEffect.AdditionalBuffToSkill ? SkillEffect.AdditionalBuff : key;
        var valueList = this.skillEffectArgumentsDic.getValue(key);
        if (!valueList) {
            valueList = new List();
            this.skillEffectArgumentsDic.add(key, valueList);
        }
        valueList.add(value);
    };
    //重置技能 技能升级时调用
    SkillBase.prototype.resetSkill = function (skillId) {
        var skillTp = TempleMgr.select("SkillTemple", skillId);
        if (!!skillTp) {
            this.skillTemple = skillTp;
            this.SetSkillBuffer(skillTp);
        }
    };
    return SkillBase;
}());
__reflect(SkillBase.prototype, "SkillBase", ["TimerBehaviour"]);
//# sourceMappingURL=SkillBase.js.map